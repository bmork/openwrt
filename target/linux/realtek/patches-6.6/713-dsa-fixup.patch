--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@ -887,6 +887,11 @@ struct dsa_switch_ops {
 	int	(*phylink_mac_prepare)(struct dsa_switch *ds, int port,
 				       unsigned int mode,
 				       phy_interface_t interface);
+	void	(*phylink_validate)(struct dsa_switch *ds, int port,
+				    unsigned long *supported,
+				    struct phylink_link_state *state);
+	int	(*phylink_mac_link_state)(struct dsa_switch *ds, int port,
+					  struct phylink_link_state *state);
 	void	(*phylink_mac_config)(struct dsa_switch *ds, int port,
 				      unsigned int mode,
 				      const struct phylink_link_state *state);
@@ -1026,6 +1031,14 @@ struct dsa_switch_ops {
 				    struct netlink_ext_ack *extack);
 	void	(*port_bridge_leave)(struct dsa_switch *ds, int port,
 				     struct dsa_bridge bridge);
+		/* Called right after .port_bridge_join() */
+	int	(*port_bridge_tx_fwd_offload)(struct dsa_switch *ds, int port,
+					      struct net_device *bridge,
+					      int bridge_num);
+	/* Called right before .port_bridge_leave() */
+	void	(*port_bridge_tx_fwd_unoffload)(struct dsa_switch *ds, int port,
+						struct net_device *bridge,
+						int bridge_num);
 	void	(*port_stp_state_set)(struct dsa_switch *ds, int port,
 				      u8 state);
 	int	(*port_mst_state_set)(struct dsa_switch *ds, int port,
--- a/drivers/net/dsa/rtl83xx/dsa.c
+++ b/drivers/net/dsa/rtl83xx/dsa.c
@@ -1127,7 +1127,9 @@ static int rtl83xx_set_ageing_time(struc
 }
 
 static int rtl83xx_port_bridge_join(struct dsa_switch *ds, int port,
-					struct net_device *bridge)
+				    struct dsa_bridge bridge,
+				    bool *tx_fwd_offload,
+				    struct netlink_ext_ack *extack)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u64 port_bitmap = BIT_ULL(priv->cpu_port), v;
@@ -1146,7 +1148,7 @@ static int rtl83xx_port_bridge_join(stru
 		 * and not being setup until the port becomes enabled.
 		 */
 		if (dsa_is_user_port(ds, i) && !priv->is_lagmember[i] && i != port) {
-			if (dsa_to_port(ds, i)->bridge_dev != bridge)
+			if (dsa_to_port(ds, i)->bridge->dev != bridge.dev)
 				continue;
 			if (priv->ports[i].enable)
 				priv->r->traffic_enable(i, port);
@@ -1174,7 +1176,7 @@ static int rtl83xx_port_bridge_join(stru
 }
 
 static void rtl83xx_port_bridge_leave(struct dsa_switch *ds, int port,
-					struct net_device *bridge)
+					struct dsa_bridge bridge)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u64 port_bitmap = 0, v;
@@ -1189,7 +1191,7 @@ static void rtl83xx_port_bridge_leave(st
 		 * other port is still a VLAN-aware port.
 		 */
 		if (dsa_is_user_port(ds, i) && i != port) {
-			if (dsa_to_port(ds, i)->bridge_dev != bridge)
+			if (dsa_to_port(ds, i)->bridge->dev != bridge.dev)
 				continue;
 			if (priv->ports[i].enable)
 				priv->r->traffic_disable(i, port);
@@ -1595,7 +1597,7 @@ static int rtl83xx_find_l2_cam_entry(str
 }
 
 static int rtl83xx_port_fdb_add(struct dsa_switch *ds, int port,
-				const unsigned char *addr, u16 vid)
+				const unsigned char *addr, u16 vid, struct dsa_db db)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u64 mac = ether_addr_to_u64(addr);
@@ -1637,7 +1639,7 @@ out:
 }
 
 static int rtl83xx_port_fdb_del(struct dsa_switch *ds, int port,
-			   const unsigned char *addr, u16 vid)
+			   const unsigned char *addr, u16 vid, struct dsa_db db)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u64 mac = ether_addr_to_u64(addr);
@@ -1710,7 +1712,8 @@ static int rtl83xx_port_fdb_dump(struct
 }
 
 static int rtl83xx_port_mdb_add(struct dsa_switch *ds, int port,
-			const struct switchdev_obj_port_mdb *mdb)
+			const struct switchdev_obj_port_mdb *mdb,
+			struct dsa_db db)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u64 mac = ether_addr_to_u64(mdb->addr);
@@ -1785,7 +1788,8 @@ out:
 }
 
 int rtl83xx_port_mdb_del(struct dsa_switch *ds, int port,
-			const struct switchdev_obj_port_mdb *mdb)
+			const struct switchdev_obj_port_mdb *mdb,
+			struct dsa_db db)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u64 mac = ether_addr_to_u64(mdb->addr);
@@ -1837,7 +1841,7 @@ out:
 
 static int rtl83xx_port_mirror_add(struct dsa_switch *ds, int port,
 				   struct dsa_mall_mirror_tc_entry *mirror,
-				   bool ingress)
+				   bool ingress, struct netlink_ext_ack *extack)
 {
 	/* We support 4 mirror groups, one destination port per group */
 	int group;
@@ -1971,12 +1975,12 @@ static int rtl83xx_port_bridge_flags(str
 }
 
 static bool rtl83xx_lag_can_offload(struct dsa_switch *ds,
-				      struct net_device *lag,
+				      struct dsa_lag lag,
 				      struct netdev_lag_upper_info *info)
 {
 	int id;
 
-	id = dsa_lag_id(ds->dst, lag);
+	id = lag.id;
 	if (id < 0 || id >= ds->num_lag_ids)
 		return false;
 
@@ -1998,8 +2002,9 @@ static int rtl83xx_port_lag_change(struc
 }
 
 static int rtl83xx_port_lag_join(struct dsa_switch *ds, int port,
-				   struct net_device *lag,
-				   struct netdev_lag_upper_info *info)
+				   struct dsa_lag lag,
+				   struct netdev_lag_upper_info *info,
+				   struct netlink_ext_ack *extack)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 	int i, err = 0;
@@ -2010,7 +2015,7 @@ static int rtl83xx_port_lag_join(struct
 	mutex_lock(&priv->reg_mutex);
 
 	for (i = 0; i < priv->n_lags; i++) {
-		if ((!priv->lag_devs[i]) || (priv->lag_devs[i] == lag))
+		if ((!priv->lag_devs[i]) || (priv->lag_devs[i] == lag.dev))
 			break;
 	}
 	if (port >= priv->cpu_port) {
@@ -2019,7 +2024,7 @@ static int rtl83xx_port_lag_join(struct
 	}
 	pr_info("port_lag_join: group %d, port %d\n",i, port);
 	if (!priv->lag_devs[i])
-		priv->lag_devs[i] = lag;
+		priv->lag_devs[i] = lag.dev;
 
 	if (priv->lag_primary[i] == -1) {
 		priv->lag_primary[i] = port;
@@ -2042,7 +2047,7 @@ out:
 }
 
 static int rtl83xx_port_lag_leave(struct dsa_switch *ds, int port,
-				    struct net_device *lag)
+				    struct dsa_lag lag)
 {
 	int i, group = -1, err;
 	struct rtl838x_switch_priv *priv = ds->priv;
--- a/drivers/net/dsa/rtl83xx/tc.c
+++ b/drivers/net/dsa/rtl83xx/tc.c
@@ -21,7 +21,7 @@ static int rtl83xx_parse_flow_rule(struc
 	/* KEY_CONTROL and KEY_BASIC are needed for forming a meaningful key */
 	if ((dissector->used_keys & BIT(FLOW_DISSECTOR_KEY_CONTROL)) == 0 ||
 	    (dissector->used_keys & BIT(FLOW_DISSECTOR_KEY_BASIC)) == 0) {
-		pr_err("Cannot form TC key: used_keys = 0x%x\n", dissector->used_keys);
+		pr_err("Cannot form TC key: used_keys = 0x%llu\n", dissector->used_keys);
 		return -EOPNOTSUPP;
 	}
 